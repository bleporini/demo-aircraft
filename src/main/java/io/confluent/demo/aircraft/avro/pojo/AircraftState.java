/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demo.aircraft.avro.pojo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AircraftState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5302141821378930135L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AircraftState\",\"namespace\":\"io.confluent.demo.aircraft.avro.pojo\",\"fields\":[{\"name\":\"icao24\",\"type\":\"string\",\"doc\":\"Unique ICAO 24-bit address of the transponder in hex string representation.\"},{\"name\":\"callsign\",\"type\":\"string\",\"doc\":\"Callsign of the vehicle (8 chars). Can be null if no callsign has been received.\"},{\"name\":\"countryOrigin\",\"type\":\"string\",\"doc\":\"Country name inferred from the ICAO 24-bit address.\"},{\"name\":\"timePosition\",\"type\":\"double\",\"doc\":\"Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.\"},{\"name\":\"lastContact\",\"type\":\"long\",\"doc\":\"Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"WGS-84 longitude in decimal degrees. Can be null.\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.\"},{\"name\":\"baroAltitude\",\"type\":\"double\",\"doc\":\"Barometric altitude in meters. Can be null.\"},{\"name\":\"velocity\",\"type\":\"double\",\"doc\":\"Velocity over ground in m/s. Can be null.\"},{\"name\":\"trueTrack\",\"type\":\"double\",\"doc\":\"True track in decimal degrees clockwise from north (north=0). Can be null.\"},{\"name\":\"verticalRate\",\"type\":\"double\",\"doc\":\"Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.\"},{\"name\":\"geoAltitude\",\"type\":\"double\",\"doc\":\"Geometric altitude in meters. Can be null.\"},{\"name\":\"squawk\",\"type\":\"string\",\"doc\":\"The transponder code aka Squawk. Can be null.\"},{\"name\":\"spi\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Whether flight status indicates special purpose indicator.\",\"default\":null},{\"name\":\"onGround\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Boolean value which indicates if the position was retrieved from a surface position report.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AircraftState> ENCODER =
      new BinaryMessageEncoder<AircraftState>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AircraftState> DECODER =
      new BinaryMessageDecoder<AircraftState>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AircraftState> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AircraftState> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AircraftState> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AircraftState>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AircraftState to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AircraftState from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AircraftState instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AircraftState fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique ICAO 24-bit address of the transponder in hex string representation. */
  @Deprecated public java.lang.CharSequence icao24;
  /** Callsign of the vehicle (8 chars). Can be null if no callsign has been received. */
  @Deprecated public java.lang.CharSequence callsign;
  /** Country name inferred from the ICAO 24-bit address. */
  @Deprecated public java.lang.CharSequence countryOrigin;
  /** Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s. */
  @Deprecated public double timePosition;
  /** Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder. */
  @Deprecated public long lastContact;
  /** WGS-84 longitude in decimal degrees. Can be null. */
  @Deprecated public double longitude;
  /** Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder. */
  @Deprecated public double latitude;
  /** Barometric altitude in meters. Can be null. */
  @Deprecated public double baroAltitude;
  /** Velocity over ground in m/s. Can be null. */
  @Deprecated public double velocity;
  /** True track in decimal degrees clockwise from north (north=0). Can be null. */
  @Deprecated public double trueTrack;
  /** Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null. */
  @Deprecated public double verticalRate;
  /** Geometric altitude in meters. Can be null. */
  @Deprecated public double geoAltitude;
  /** The transponder code aka Squawk. Can be null. */
  @Deprecated public java.lang.CharSequence squawk;
  /** Whether flight status indicates special purpose indicator. */
  @Deprecated public java.lang.Boolean spi;
  /** Boolean value which indicates if the position was retrieved from a surface position report. */
  @Deprecated public java.lang.Boolean onGround;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AircraftState() {}

  /**
   * All-args constructor.
   * @param icao24 Unique ICAO 24-bit address of the transponder in hex string representation.
   * @param callsign Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
   * @param countryOrigin Country name inferred from the ICAO 24-bit address.
   * @param timePosition Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
   * @param lastContact Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   * @param longitude WGS-84 longitude in decimal degrees. Can be null.
   * @param latitude Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   * @param baroAltitude Barometric altitude in meters. Can be null.
   * @param velocity Velocity over ground in m/s. Can be null.
   * @param trueTrack True track in decimal degrees clockwise from north (north=0). Can be null.
   * @param verticalRate Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
   * @param geoAltitude Geometric altitude in meters. Can be null.
   * @param squawk The transponder code aka Squawk. Can be null.
   * @param spi Whether flight status indicates special purpose indicator.
   * @param onGround Boolean value which indicates if the position was retrieved from a surface position report.
   */
  public AircraftState(java.lang.CharSequence icao24, java.lang.CharSequence callsign, java.lang.CharSequence countryOrigin, java.lang.Double timePosition, java.lang.Long lastContact, java.lang.Double longitude, java.lang.Double latitude, java.lang.Double baroAltitude, java.lang.Double velocity, java.lang.Double trueTrack, java.lang.Double verticalRate, java.lang.Double geoAltitude, java.lang.CharSequence squawk, java.lang.Boolean spi, java.lang.Boolean onGround) {
    this.icao24 = icao24;
    this.callsign = callsign;
    this.countryOrigin = countryOrigin;
    this.timePosition = timePosition;
    this.lastContact = lastContact;
    this.longitude = longitude;
    this.latitude = latitude;
    this.baroAltitude = baroAltitude;
    this.velocity = velocity;
    this.trueTrack = trueTrack;
    this.verticalRate = verticalRate;
    this.geoAltitude = geoAltitude;
    this.squawk = squawk;
    this.spi = spi;
    this.onGround = onGround;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return icao24;
    case 1: return callsign;
    case 2: return countryOrigin;
    case 3: return timePosition;
    case 4: return lastContact;
    case 5: return longitude;
    case 6: return latitude;
    case 7: return baroAltitude;
    case 8: return velocity;
    case 9: return trueTrack;
    case 10: return verticalRate;
    case 11: return geoAltitude;
    case 12: return squawk;
    case 13: return spi;
    case 14: return onGround;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: icao24 = (java.lang.CharSequence)value$; break;
    case 1: callsign = (java.lang.CharSequence)value$; break;
    case 2: countryOrigin = (java.lang.CharSequence)value$; break;
    case 3: timePosition = (java.lang.Double)value$; break;
    case 4: lastContact = (java.lang.Long)value$; break;
    case 5: longitude = (java.lang.Double)value$; break;
    case 6: latitude = (java.lang.Double)value$; break;
    case 7: baroAltitude = (java.lang.Double)value$; break;
    case 8: velocity = (java.lang.Double)value$; break;
    case 9: trueTrack = (java.lang.Double)value$; break;
    case 10: verticalRate = (java.lang.Double)value$; break;
    case 11: geoAltitude = (java.lang.Double)value$; break;
    case 12: squawk = (java.lang.CharSequence)value$; break;
    case 13: spi = (java.lang.Boolean)value$; break;
    case 14: onGround = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'icao24' field.
   * @return Unique ICAO 24-bit address of the transponder in hex string representation.
   */
  public java.lang.CharSequence getIcao24() {
    return icao24;
  }


  /**
   * Sets the value of the 'icao24' field.
   * Unique ICAO 24-bit address of the transponder in hex string representation.
   * @param value the value to set.
   */
  public void setIcao24(java.lang.CharSequence value) {
    this.icao24 = value;
  }

  /**
   * Gets the value of the 'callsign' field.
   * @return Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
   */
  public java.lang.CharSequence getCallsign() {
    return callsign;
  }


  /**
   * Sets the value of the 'callsign' field.
   * Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
   * @param value the value to set.
   */
  public void setCallsign(java.lang.CharSequence value) {
    this.callsign = value;
  }

  /**
   * Gets the value of the 'countryOrigin' field.
   * @return Country name inferred from the ICAO 24-bit address.
   */
  public java.lang.CharSequence getCountryOrigin() {
    return countryOrigin;
  }


  /**
   * Sets the value of the 'countryOrigin' field.
   * Country name inferred from the ICAO 24-bit address.
   * @param value the value to set.
   */
  public void setCountryOrigin(java.lang.CharSequence value) {
    this.countryOrigin = value;
  }

  /**
   * Gets the value of the 'timePosition' field.
   * @return Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
   */
  public double getTimePosition() {
    return timePosition;
  }


  /**
   * Sets the value of the 'timePosition' field.
   * Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
   * @param value the value to set.
   */
  public void setTimePosition(double value) {
    this.timePosition = value;
  }

  /**
   * Gets the value of the 'lastContact' field.
   * @return Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   */
  public long getLastContact() {
    return lastContact;
  }


  /**
   * Sets the value of the 'lastContact' field.
   * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   * @param value the value to set.
   */
  public void setLastContact(long value) {
    this.lastContact = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return WGS-84 longitude in decimal degrees. Can be null.
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * WGS-84 longitude in decimal degrees. Can be null.
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'baroAltitude' field.
   * @return Barometric altitude in meters. Can be null.
   */
  public double getBaroAltitude() {
    return baroAltitude;
  }


  /**
   * Sets the value of the 'baroAltitude' field.
   * Barometric altitude in meters. Can be null.
   * @param value the value to set.
   */
  public void setBaroAltitude(double value) {
    this.baroAltitude = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return Velocity over ground in m/s. Can be null.
   */
  public double getVelocity() {
    return velocity;
  }


  /**
   * Sets the value of the 'velocity' field.
   * Velocity over ground in m/s. Can be null.
   * @param value the value to set.
   */
  public void setVelocity(double value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'trueTrack' field.
   * @return True track in decimal degrees clockwise from north (north=0). Can be null.
   */
  public double getTrueTrack() {
    return trueTrack;
  }


  /**
   * Sets the value of the 'trueTrack' field.
   * True track in decimal degrees clockwise from north (north=0). Can be null.
   * @param value the value to set.
   */
  public void setTrueTrack(double value) {
    this.trueTrack = value;
  }

  /**
   * Gets the value of the 'verticalRate' field.
   * @return Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
   */
  public double getVerticalRate() {
    return verticalRate;
  }


  /**
   * Sets the value of the 'verticalRate' field.
   * Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
   * @param value the value to set.
   */
  public void setVerticalRate(double value) {
    this.verticalRate = value;
  }

  /**
   * Gets the value of the 'geoAltitude' field.
   * @return Geometric altitude in meters. Can be null.
   */
  public double getGeoAltitude() {
    return geoAltitude;
  }


  /**
   * Sets the value of the 'geoAltitude' field.
   * Geometric altitude in meters. Can be null.
   * @param value the value to set.
   */
  public void setGeoAltitude(double value) {
    this.geoAltitude = value;
  }

  /**
   * Gets the value of the 'squawk' field.
   * @return The transponder code aka Squawk. Can be null.
   */
  public java.lang.CharSequence getSquawk() {
    return squawk;
  }


  /**
   * Sets the value of the 'squawk' field.
   * The transponder code aka Squawk. Can be null.
   * @param value the value to set.
   */
  public void setSquawk(java.lang.CharSequence value) {
    this.squawk = value;
  }

  /**
   * Gets the value of the 'spi' field.
   * @return Whether flight status indicates special purpose indicator.
   */
  public java.lang.Boolean getSpi() {
    return spi;
  }


  /**
   * Sets the value of the 'spi' field.
   * Whether flight status indicates special purpose indicator.
   * @param value the value to set.
   */
  public void setSpi(java.lang.Boolean value) {
    this.spi = value;
  }

  /**
   * Gets the value of the 'onGround' field.
   * @return Boolean value which indicates if the position was retrieved from a surface position report.
   */
  public java.lang.Boolean getOnGround() {
    return onGround;
  }


  /**
   * Sets the value of the 'onGround' field.
   * Boolean value which indicates if the position was retrieved from a surface position report.
   * @param value the value to set.
   */
  public void setOnGround(java.lang.Boolean value) {
    this.onGround = value;
  }

  /**
   * Creates a new AircraftState RecordBuilder.
   * @return A new AircraftState RecordBuilder
   */
  public static io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder newBuilder() {
    return new io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder();
  }

  /**
   * Creates a new AircraftState RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AircraftState RecordBuilder
   */
  public static io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder newBuilder(io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder other) {
    if (other == null) {
      return new io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder();
    } else {
      return new io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder(other);
    }
  }

  /**
   * Creates a new AircraftState RecordBuilder by copying an existing AircraftState instance.
   * @param other The existing instance to copy.
   * @return A new AircraftState RecordBuilder
   */
  public static io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder newBuilder(io.confluent.demo.aircraft.avro.pojo.AircraftState other) {
    if (other == null) {
      return new io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder();
    } else {
      return new io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder(other);
    }
  }

  /**
   * RecordBuilder for AircraftState instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AircraftState>
    implements org.apache.avro.data.RecordBuilder<AircraftState> {

    /** Unique ICAO 24-bit address of the transponder in hex string representation. */
    private java.lang.CharSequence icao24;
    /** Callsign of the vehicle (8 chars). Can be null if no callsign has been received. */
    private java.lang.CharSequence callsign;
    /** Country name inferred from the ICAO 24-bit address. */
    private java.lang.CharSequence countryOrigin;
    /** Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s. */
    private double timePosition;
    /** Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder. */
    private long lastContact;
    /** WGS-84 longitude in decimal degrees. Can be null. */
    private double longitude;
    /** Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder. */
    private double latitude;
    /** Barometric altitude in meters. Can be null. */
    private double baroAltitude;
    /** Velocity over ground in m/s. Can be null. */
    private double velocity;
    /** True track in decimal degrees clockwise from north (north=0). Can be null. */
    private double trueTrack;
    /** Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null. */
    private double verticalRate;
    /** Geometric altitude in meters. Can be null. */
    private double geoAltitude;
    /** The transponder code aka Squawk. Can be null. */
    private java.lang.CharSequence squawk;
    /** Whether flight status indicates special purpose indicator. */
    private java.lang.Boolean spi;
    /** Boolean value which indicates if the position was retrieved from a surface position report. */
    private java.lang.Boolean onGround;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.icao24)) {
        this.icao24 = data().deepCopy(fields()[0].schema(), other.icao24);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callsign)) {
        this.callsign = data().deepCopy(fields()[1].schema(), other.callsign);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.countryOrigin)) {
        this.countryOrigin = data().deepCopy(fields()[2].schema(), other.countryOrigin);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timePosition)) {
        this.timePosition = data().deepCopy(fields()[3].schema(), other.timePosition);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.lastContact)) {
        this.lastContact = data().deepCopy(fields()[4].schema(), other.lastContact);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.baroAltitude)) {
        this.baroAltitude = data().deepCopy(fields()[7].schema(), other.baroAltitude);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.velocity)) {
        this.velocity = data().deepCopy(fields()[8].schema(), other.velocity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.trueTrack)) {
        this.trueTrack = data().deepCopy(fields()[9].schema(), other.trueTrack);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.verticalRate)) {
        this.verticalRate = data().deepCopy(fields()[10].schema(), other.verticalRate);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.geoAltitude)) {
        this.geoAltitude = data().deepCopy(fields()[11].schema(), other.geoAltitude);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.squawk)) {
        this.squawk = data().deepCopy(fields()[12].schema(), other.squawk);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.spi)) {
        this.spi = data().deepCopy(fields()[13].schema(), other.spi);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.onGround)) {
        this.onGround = data().deepCopy(fields()[14].schema(), other.onGround);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing AircraftState instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demo.aircraft.avro.pojo.AircraftState other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.icao24)) {
        this.icao24 = data().deepCopy(fields()[0].schema(), other.icao24);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callsign)) {
        this.callsign = data().deepCopy(fields()[1].schema(), other.callsign);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryOrigin)) {
        this.countryOrigin = data().deepCopy(fields()[2].schema(), other.countryOrigin);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timePosition)) {
        this.timePosition = data().deepCopy(fields()[3].schema(), other.timePosition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastContact)) {
        this.lastContact = data().deepCopy(fields()[4].schema(), other.lastContact);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longitude)) {
        this.longitude = data().deepCopy(fields()[5].schema(), other.longitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.baroAltitude)) {
        this.baroAltitude = data().deepCopy(fields()[7].schema(), other.baroAltitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.velocity)) {
        this.velocity = data().deepCopy(fields()[8].schema(), other.velocity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.trueTrack)) {
        this.trueTrack = data().deepCopy(fields()[9].schema(), other.trueTrack);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.verticalRate)) {
        this.verticalRate = data().deepCopy(fields()[10].schema(), other.verticalRate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.geoAltitude)) {
        this.geoAltitude = data().deepCopy(fields()[11].schema(), other.geoAltitude);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.squawk)) {
        this.squawk = data().deepCopy(fields()[12].schema(), other.squawk);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.spi)) {
        this.spi = data().deepCopy(fields()[13].schema(), other.spi);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.onGround)) {
        this.onGround = data().deepCopy(fields()[14].schema(), other.onGround);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'icao24' field.
      * Unique ICAO 24-bit address of the transponder in hex string representation.
      * @return The value.
      */
    public java.lang.CharSequence getIcao24() {
      return icao24;
    }


    /**
      * Sets the value of the 'icao24' field.
      * Unique ICAO 24-bit address of the transponder in hex string representation.
      * @param value The value of 'icao24'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setIcao24(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.icao24 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'icao24' field has been set.
      * Unique ICAO 24-bit address of the transponder in hex string representation.
      * @return True if the 'icao24' field has been set, false otherwise.
      */
    public boolean hasIcao24() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'icao24' field.
      * Unique ICAO 24-bit address of the transponder in hex string representation.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearIcao24() {
      icao24 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callsign' field.
      * Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
      * @return The value.
      */
    public java.lang.CharSequence getCallsign() {
      return callsign;
    }


    /**
      * Sets the value of the 'callsign' field.
      * Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
      * @param value The value of 'callsign'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setCallsign(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.callsign = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callsign' field has been set.
      * Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
      * @return True if the 'callsign' field has been set, false otherwise.
      */
    public boolean hasCallsign() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callsign' field.
      * Callsign of the vehicle (8 chars). Can be null if no callsign has been received.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearCallsign() {
      callsign = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryOrigin' field.
      * Country name inferred from the ICAO 24-bit address.
      * @return The value.
      */
    public java.lang.CharSequence getCountryOrigin() {
      return countryOrigin;
    }


    /**
      * Sets the value of the 'countryOrigin' field.
      * Country name inferred from the ICAO 24-bit address.
      * @param value The value of 'countryOrigin'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setCountryOrigin(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.countryOrigin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'countryOrigin' field has been set.
      * Country name inferred from the ICAO 24-bit address.
      * @return True if the 'countryOrigin' field has been set, false otherwise.
      */
    public boolean hasCountryOrigin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'countryOrigin' field.
      * Country name inferred from the ICAO 24-bit address.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearCountryOrigin() {
      countryOrigin = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timePosition' field.
      * Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
      * @return The value.
      */
    public double getTimePosition() {
      return timePosition;
    }


    /**
      * Sets the value of the 'timePosition' field.
      * Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
      * @param value The value of 'timePosition'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setTimePosition(double value) {
      validate(fields()[3], value);
      this.timePosition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timePosition' field has been set.
      * Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
      * @return True if the 'timePosition' field has been set, false otherwise.
      */
    public boolean hasTimePosition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timePosition' field.
      * Unix timestamp (seconds) for the last position update. Can be null if no position report was received by OpenSky within the past 15s.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearTimePosition() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastContact' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return The value.
      */
    public long getLastContact() {
      return lastContact;
    }


    /**
      * Sets the value of the 'lastContact' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @param value The value of 'lastContact'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setLastContact(long value) {
      validate(fields()[4], value);
      this.lastContact = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lastContact' field has been set.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return True if the 'lastContact' field has been set, false otherwise.
      */
    public boolean hasLastContact() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lastContact' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearLastContact() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * WGS-84 longitude in decimal degrees. Can be null.
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * WGS-84 longitude in decimal degrees. Can be null.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setLongitude(double value) {
      validate(fields()[5], value);
      this.longitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * WGS-84 longitude in decimal degrees. Can be null.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'longitude' field.
      * WGS-84 longitude in decimal degrees. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearLongitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setLatitude(double value) {
      validate(fields()[6], value);
      this.latitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'latitude' field.
      * Unix timestamp (seconds) for the last update in general. This field is updated for any new, valid message received from the transponder.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearLatitude() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'baroAltitude' field.
      * Barometric altitude in meters. Can be null.
      * @return The value.
      */
    public double getBaroAltitude() {
      return baroAltitude;
    }


    /**
      * Sets the value of the 'baroAltitude' field.
      * Barometric altitude in meters. Can be null.
      * @param value The value of 'baroAltitude'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setBaroAltitude(double value) {
      validate(fields()[7], value);
      this.baroAltitude = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'baroAltitude' field has been set.
      * Barometric altitude in meters. Can be null.
      * @return True if the 'baroAltitude' field has been set, false otherwise.
      */
    public boolean hasBaroAltitude() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'baroAltitude' field.
      * Barometric altitude in meters. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearBaroAltitude() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * Velocity over ground in m/s. Can be null.
      * @return The value.
      */
    public double getVelocity() {
      return velocity;
    }


    /**
      * Sets the value of the 'velocity' field.
      * Velocity over ground in m/s. Can be null.
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setVelocity(double value) {
      validate(fields()[8], value);
      this.velocity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * Velocity over ground in m/s. Can be null.
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'velocity' field.
      * Velocity over ground in m/s. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearVelocity() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'trueTrack' field.
      * True track in decimal degrees clockwise from north (north=0). Can be null.
      * @return The value.
      */
    public double getTrueTrack() {
      return trueTrack;
    }


    /**
      * Sets the value of the 'trueTrack' field.
      * True track in decimal degrees clockwise from north (north=0). Can be null.
      * @param value The value of 'trueTrack'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setTrueTrack(double value) {
      validate(fields()[9], value);
      this.trueTrack = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'trueTrack' field has been set.
      * True track in decimal degrees clockwise from north (north=0). Can be null.
      * @return True if the 'trueTrack' field has been set, false otherwise.
      */
    public boolean hasTrueTrack() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'trueTrack' field.
      * True track in decimal degrees clockwise from north (north=0). Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearTrueTrack() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'verticalRate' field.
      * Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
      * @return The value.
      */
    public double getVerticalRate() {
      return verticalRate;
    }


    /**
      * Sets the value of the 'verticalRate' field.
      * Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
      * @param value The value of 'verticalRate'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setVerticalRate(double value) {
      validate(fields()[10], value);
      this.verticalRate = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'verticalRate' field has been set.
      * Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
      * @return True if the 'verticalRate' field has been set, false otherwise.
      */
    public boolean hasVerticalRate() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'verticalRate' field.
      * Vertical rate in m/s. A positive value indicates that the airplane is climbing, a negative value indicates that it descends. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearVerticalRate() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'geoAltitude' field.
      * Geometric altitude in meters. Can be null.
      * @return The value.
      */
    public double getGeoAltitude() {
      return geoAltitude;
    }


    /**
      * Sets the value of the 'geoAltitude' field.
      * Geometric altitude in meters. Can be null.
      * @param value The value of 'geoAltitude'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setGeoAltitude(double value) {
      validate(fields()[11], value);
      this.geoAltitude = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'geoAltitude' field has been set.
      * Geometric altitude in meters. Can be null.
      * @return True if the 'geoAltitude' field has been set, false otherwise.
      */
    public boolean hasGeoAltitude() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'geoAltitude' field.
      * Geometric altitude in meters. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearGeoAltitude() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'squawk' field.
      * The transponder code aka Squawk. Can be null.
      * @return The value.
      */
    public java.lang.CharSequence getSquawk() {
      return squawk;
    }


    /**
      * Sets the value of the 'squawk' field.
      * The transponder code aka Squawk. Can be null.
      * @param value The value of 'squawk'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setSquawk(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.squawk = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'squawk' field has been set.
      * The transponder code aka Squawk. Can be null.
      * @return True if the 'squawk' field has been set, false otherwise.
      */
    public boolean hasSquawk() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'squawk' field.
      * The transponder code aka Squawk. Can be null.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearSquawk() {
      squawk = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'spi' field.
      * Whether flight status indicates special purpose indicator.
      * @return The value.
      */
    public java.lang.Boolean getSpi() {
      return spi;
    }


    /**
      * Sets the value of the 'spi' field.
      * Whether flight status indicates special purpose indicator.
      * @param value The value of 'spi'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setSpi(java.lang.Boolean value) {
      validate(fields()[13], value);
      this.spi = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'spi' field has been set.
      * Whether flight status indicates special purpose indicator.
      * @return True if the 'spi' field has been set, false otherwise.
      */
    public boolean hasSpi() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'spi' field.
      * Whether flight status indicates special purpose indicator.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearSpi() {
      spi = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'onGround' field.
      * Boolean value which indicates if the position was retrieved from a surface position report.
      * @return The value.
      */
    public java.lang.Boolean getOnGround() {
      return onGround;
    }


    /**
      * Sets the value of the 'onGround' field.
      * Boolean value which indicates if the position was retrieved from a surface position report.
      * @param value The value of 'onGround'.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder setOnGround(java.lang.Boolean value) {
      validate(fields()[14], value);
      this.onGround = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'onGround' field has been set.
      * Boolean value which indicates if the position was retrieved from a surface position report.
      * @return True if the 'onGround' field has been set, false otherwise.
      */
    public boolean hasOnGround() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'onGround' field.
      * Boolean value which indicates if the position was retrieved from a surface position report.
      * @return This builder.
      */
    public io.confluent.demo.aircraft.avro.pojo.AircraftState.Builder clearOnGround() {
      onGround = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AircraftState build() {
      try {
        AircraftState record = new AircraftState();
        record.icao24 = fieldSetFlags()[0] ? this.icao24 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.callsign = fieldSetFlags()[1] ? this.callsign : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.countryOrigin = fieldSetFlags()[2] ? this.countryOrigin : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timePosition = fieldSetFlags()[3] ? this.timePosition : (java.lang.Double) defaultValue(fields()[3]);
        record.lastContact = fieldSetFlags()[4] ? this.lastContact : (java.lang.Long) defaultValue(fields()[4]);
        record.longitude = fieldSetFlags()[5] ? this.longitude : (java.lang.Double) defaultValue(fields()[5]);
        record.latitude = fieldSetFlags()[6] ? this.latitude : (java.lang.Double) defaultValue(fields()[6]);
        record.baroAltitude = fieldSetFlags()[7] ? this.baroAltitude : (java.lang.Double) defaultValue(fields()[7]);
        record.velocity = fieldSetFlags()[8] ? this.velocity : (java.lang.Double) defaultValue(fields()[8]);
        record.trueTrack = fieldSetFlags()[9] ? this.trueTrack : (java.lang.Double) defaultValue(fields()[9]);
        record.verticalRate = fieldSetFlags()[10] ? this.verticalRate : (java.lang.Double) defaultValue(fields()[10]);
        record.geoAltitude = fieldSetFlags()[11] ? this.geoAltitude : (java.lang.Double) defaultValue(fields()[11]);
        record.squawk = fieldSetFlags()[12] ? this.squawk : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.spi = fieldSetFlags()[13] ? this.spi : (java.lang.Boolean) defaultValue(fields()[13]);
        record.onGround = fieldSetFlags()[14] ? this.onGround : (java.lang.Boolean) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AircraftState>
    WRITER$ = (org.apache.avro.io.DatumWriter<AircraftState>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AircraftState>
    READER$ = (org.apache.avro.io.DatumReader<AircraftState>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.icao24);

    out.writeString(this.callsign);

    out.writeString(this.countryOrigin);

    out.writeDouble(this.timePosition);

    out.writeLong(this.lastContact);

    out.writeDouble(this.longitude);

    out.writeDouble(this.latitude);

    out.writeDouble(this.baroAltitude);

    out.writeDouble(this.velocity);

    out.writeDouble(this.trueTrack);

    out.writeDouble(this.verticalRate);

    out.writeDouble(this.geoAltitude);

    out.writeString(this.squawk);

    if (this.spi == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.spi);
    }

    if (this.onGround == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.onGround);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.icao24 = in.readString(this.icao24 instanceof Utf8 ? (Utf8)this.icao24 : null);

      this.callsign = in.readString(this.callsign instanceof Utf8 ? (Utf8)this.callsign : null);

      this.countryOrigin = in.readString(this.countryOrigin instanceof Utf8 ? (Utf8)this.countryOrigin : null);

      this.timePosition = in.readDouble();

      this.lastContact = in.readLong();

      this.longitude = in.readDouble();

      this.latitude = in.readDouble();

      this.baroAltitude = in.readDouble();

      this.velocity = in.readDouble();

      this.trueTrack = in.readDouble();

      this.verticalRate = in.readDouble();

      this.geoAltitude = in.readDouble();

      this.squawk = in.readString(this.squawk instanceof Utf8 ? (Utf8)this.squawk : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.spi = null;
      } else {
        this.spi = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.onGround = null;
      } else {
        this.onGround = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.icao24 = in.readString(this.icao24 instanceof Utf8 ? (Utf8)this.icao24 : null);
          break;

        case 1:
          this.callsign = in.readString(this.callsign instanceof Utf8 ? (Utf8)this.callsign : null);
          break;

        case 2:
          this.countryOrigin = in.readString(this.countryOrigin instanceof Utf8 ? (Utf8)this.countryOrigin : null);
          break;

        case 3:
          this.timePosition = in.readDouble();
          break;

        case 4:
          this.lastContact = in.readLong();
          break;

        case 5:
          this.longitude = in.readDouble();
          break;

        case 6:
          this.latitude = in.readDouble();
          break;

        case 7:
          this.baroAltitude = in.readDouble();
          break;

        case 8:
          this.velocity = in.readDouble();
          break;

        case 9:
          this.trueTrack = in.readDouble();
          break;

        case 10:
          this.verticalRate = in.readDouble();
          break;

        case 11:
          this.geoAltitude = in.readDouble();
          break;

        case 12:
          this.squawk = in.readString(this.squawk instanceof Utf8 ? (Utf8)this.squawk : null);
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.spi = null;
          } else {
            this.spi = in.readBoolean();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.onGround = null;
          } else {
            this.onGround = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










